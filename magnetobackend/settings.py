"""
Django settings for magnetobackend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import environ, os
from corsheaders.defaults import default_headers


env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
API_TOKEN = env('API_TOKEN')

# PAYSTACK
PAYSTACK_SECRET_KEY = env('PAYSTACK_SECRET_KEY')
PAYSTACK_PUBLIC_KEY = env('PAYSTACK_PUBLIC_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'subject',
    'class',
    'exam',
    'lesson',
    'users',
    'subscription',
    'ai_agent',

    'corsheaders',
    'tinymce',
    'django_filters',

    'rest_framework',
    "rest_framework.authtoken",
    'rest_framework_simplejwt',
    'dj_rest_auth',

    # auth
    "django.contrib.sites",
    'allauth',
    'allauth.account',
    "dj_rest_auth.registration",



    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # mpesa
    'django_daraja'


]




MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'SCOPE':[
#             'profile',
#             'email'
#         ],
#         'AUTH_PARAMS':{
#             'access_type':'online'
#         },
#         'APP': {
#             'client_id': env('GOOGLE_CLIENT_ID'),
#             'secret': env('GOOGLE_CLIENT_SECRET'),
#             'key': ''
#         }
#     }
# }

ROOT_URLCONF = 'magnetobackend.urls'

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',
#     'http://127.0.0.1:3000',
#     'http://192.168.100:3000',
#     'http://127.0.0.1:8000'
# ]
CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    'credentials',
    'X-CSRFToken',
    'Access-Control-Allow-Origin',
    'x-user-email',
    
    # Add other custom headers as needed
]

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
]
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_TRUSTED_ORIGINS = ['http://*.127.0.0.1', "http://localhost:3000", 'http://127.0.0.1:3000', 'http://192.168.100:3000']



AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Django default backend
    'allauth.account.auth_backends.AuthenticationBackend',  # allauth backend for social login
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'magnetobackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_FILE_PATH = BASE_DIR / 'emails'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "none"



SITE_ID = 1
SOCIALACCOUNT_LOGIN_ON_GET = True
LOGIN_URL = 'http://localhost:3000/signin'
LOGIN_REDIRECT_URL = 'http://localhost:3000/'
LOGOUT_REDIRECT_URL = 'http://localhost:3000/signin'
GOOGLE_OAUTH_CALLBACK_URL = 'http://localhost:8000/magneto/google/callback/'
NEXT_JS_CALLBACK_URL = 'http://localhost:3000/auth/callback'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        # "rest_framework.permissions.IsAuthenticated",
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 3,
} 

REST_SESSION_LOGIN = False
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'jwt-access-token',
    'JWT_AUTH_REFRESH_COOKIE': 'jwt-refresh-token',
    'JWT_AUTH_COOKIE_HTTPONLY': True,
    'JWT_AUTH_REFRESH_COOKIE_HTTPONLY': True,
    'JWT_AUTH_COOKIE_SECURE': True,  
    'JWT_AUTH_REFRESH_COOKIE_SECURE': True, 
    'JWT_AUTH_COOKIE_SAMESITE': 'Strict',  
}

   
JWT_AUTH_SECURE = True

# Enable social login in dj-rest-auth
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'dj_rest_auth.registration.serializers.RegisterSerializer',
}

REST_AUTH_SOCIAL_SERIALIZERS = {
    "SOCIAL_LOGIN_SERIALIZER": "dj_rest_auth.social_serializers.SocialLoginSerializer",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    "ALGORITHM": "HS256",
    "AUTH_HEADER_TYPES": ("Bearer",),

}


# tinymce
TINYMCE_DEFAULT_CONFIG = {
    'cleanup_on_startup': True,
    'custom_undo_redo_levels': 20,
    'selector': 'textarea',
    'height': 360,
    'width': 800,
    'menubar': 'file edit view insert format tools table help',
    'plugins': 'advlist autolink lists link image charmap print preview hr anchor pagebreak codesample math image media link',
    'toolbar': 'undo redo | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image media | code',
    
    # Enable file picker callback to open file upload dialog
    'file_picker_callback': """
        function(callback, value, meta) {
            // Create a hidden file input element
            var input = document.createElement('input');
            input.setAttribute('type', 'file');
            input.setAttribute('accept', (meta.filetype === 'image') ? 'image/*' : '*');
            
            // Trigger file selection dialog
            input.onchange = function() {
                var file = this.files[0];
                var reader = new FileReader();
                
                // Read the file as a data URL
                reader.onload = function() {
                    // Pass the file URL to the callback
                    callback(reader.result, { alt: file.name });
                };
                reader.readAsDataURL(file);
            };
            
            input.click();
        }
    """,
     "forced_root_block": False,  # Prevent wrapping everything in <p>
    "force_br_newlines": True,  # Convert line breaks to <br>
    "force_p_newlines": False,  # Don't force <p> for new lines
    "valid_elements": (
        "a[href|target=_blank],"
        "strong/b,"
        "em/i,"
        "ul,ol,li,"
        "br,"
        "p"
    ),  # Allow only essential elements
    "valid_styles": {},  # Remove all inline styles
    "remove_linebreaks": False,  # Keep line breaks
    "convert_urls": False,  # Avoid automatic URL conversion
    "content_style": "",  # Keep clean styles
}




TINYMCE_SPELLCHECKER = True
TINYMCE_COMPRESSOR = False