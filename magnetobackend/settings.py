"""
Django settings for magnetobackend project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import environ, os
from corsheaders.defaults import default_headers


env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')
API_TOKEN = env('API_TOKEN')

# PAYSTACK
PAYSTACK_SECRET_KEY = env('PAYSTACK_SECRET_KEY')
PAYSTACK_PUBLIC_KEY = env('PAYSTACK_PUBLIC_KEY')


# AWS S3 Settings
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = 'magneto-django-s3'
AWS_S3_REGION_NAME = 'us-east-1'  # Your bucket region_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
AWS_S3_FILE_OVERWRITE = False
AWS_S3_VERIFY = True
AWS_DEFAULT_ACL = None   
AWS_QUERYSTRING_AUTH = False          # Disable query-string auth
AWS_S3_SIGNATURE_VERSION = 's3v4'     # Required for some regions
AWS_LOCATION = 'static'


STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "region_name": AWS_S3_REGION_NAME,
            "default_acl": AWS_DEFAULT_ACL,
            "querystring_auth": AWS_QUERYSTRING_AUTH,
            "location":"media"
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "region_name": AWS_S3_REGION_NAME,
            "default_acl": AWS_DEFAULT_ACL,
            "querystring_auth": AWS_QUERYSTRING_AUTH,
            "location": AWS_LOCATION,
        },
    },
}

STATIC_URL = "https://magnetolearnbucket.s3.amazonaws.com/static/"
MEDIA_URL = "https://magnetolearnbucket.s3.amazonaws.com/media/"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'subject',
    'class',
    'exam',
    'lesson',
    'users',
    'subscription',
    'ai_agent',
    'storages',

    'corsheaders',
    'tinymce',
    'django_filters',

    'rest_framework',
    "rest_framework.authtoken",
    'rest_framework_simplejwt',
    'dj_rest_auth',

    # auth
    "django.contrib.sites",
    'allauth',
    'allauth.account',
    "dj_rest_auth.registration",



    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # mpesa
    'django_daraja'


]




MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'SCOPE':[
#             'profile',
#             'email'
#         ],
#         'AUTH_PARAMS':{
#             'access_type':'online'
#         },
#         'APP': {
#             'client_id': env('GOOGLE_CLIENT_ID'),
#             'secret': env('GOOGLE_CLIENT_SECRET'),
#             'key': ''
#         }
#     }
# }

ROOT_URLCONF = 'magnetobackend.urls'

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',
#     'http://127.0.0.1:3000',
#     'http://192.168.100:3000',
#     'http://127.0.0.1:8000'
# ]
CORS_ALLOW_HEADERS = [
    "content-type",
    "authorization",
    'credentials',
    'X-CSRFToken',
    'Access-Control-Allow-Origin',
    'x-user-email',
    
    # Add other custom headers as needed
]

CORS_ALLOW_METHODS = [
    "GET",
    "POST",
    "PUT",
    "PATCH",
    "DELETE",
]
CSRF_COOKIE_SECURE = False
CSRF_COOKIE_HTTPONLY = False
CSRF_TRUSTED_ORIGINS = ['http://*.127.0.0.1', "http://localhost:3000", 'http://127.0.0.1:3000', 'http://192.168.100:3000']



AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Django default backend
    'allauth.account.auth_backends.AuthenticationBackend',  # allauth backend for social login
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'magnetobackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
STATIC_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION}/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static') 

# Media files (uploads)
MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_FILE_PATH = BASE_DIR / 'emails'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = "none"
AWS_LOCATION = 'static' 



SITE_ID = 1
SOCIALACCOUNT_LOGIN_ON_GET = True
LOGIN_URL = 'http://localhost:3000/signin'
LOGIN_REDIRECT_URL = 'http://localhost:3000/'
LOGOUT_REDIRECT_URL = 'http://localhost:3000/signin'
GOOGLE_OAUTH_CALLBACK_URL = 'http://localhost:8000/magneto/google/callback/'
NEXT_JS_CALLBACK_URL = 'http://localhost:3000/auth/callback'

# REDIS SETUP
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env('REDIS_URL'),  # From Redis Cloud
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SSL": False,  # Enable if your Redis Cloud instance uses SSL
        }
    }
}

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        # "rest_framework.permissions.IsAuthenticated",
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 6,
} 

REST_SESSION_LOGIN = False
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'jwt-access-token',
    'JWT_AUTH_REFRESH_COOKIE': 'jwt-refresh-token',
    'JWT_AUTH_COOKIE_HTTPONLY': True,
    'JWT_AUTH_REFRESH_COOKIE_HTTPONLY': True,
    'JWT_AUTH_COOKIE_SECURE': True,  
    'JWT_AUTH_REFRESH_COOKIE_SECURE': True, 
    'JWT_AUTH_COOKIE_SAMESITE': 'Strict',  
}

   
JWT_AUTH_SECURE = True

# Enable social login in dj-rest-auth
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'dj_rest_auth.registration.serializers.RegisterSerializer',
}

REST_AUTH_SOCIAL_SERIALIZERS = {
    "SOCIAL_LOGIN_SERIALIZER": "dj_rest_auth.social_serializers.SocialLoginSerializer",
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    "ALGORITHM": "HS256",
    "AUTH_HEADER_TYPES": ("Bearer",),

}


# myproject/settings.py

TINYMCE_DEFAULT_CONFIG = {
    'selector': 'textarea',
    'height': 360,
    'width': 800,
    'plugins': 'image, link, codesample',
    'toolbar': 'undo redo | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | codesample',
    'images_upload_url': '/api/tinymce/upload/',
  'images_upload_handler': """
        function (blobInfo, progress) {
            return new Promise(function (resolve, reject) {
                const xhr = new XMLHttpRequest();
                xhr.open('POST', '/api/tinymce/upload/');
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

                xhr.onload = function () {
                    if (xhr.status < 200 || xhr.status >= 300) {
                        reject('HTTP Error: ' + xhr.status);
                        return;
                    }
                    try {
                        const json = JSON.parse(xhr.responseText);
                        resolve(json.location);
                    } catch (e) {
                        reject('Invalid JSON: ' + e.message);
                    }
                };

                xhr.onerror = function () {
                    reject('Network error');
                };

                const formData = new FormData();
                formData.append('file', blobInfo.blob(), blobInfo.filename());
                xhr.send(formData);
            });
        }
    """,
    'automatic_uploads': True,
    'file_picker_types': 'image',
}